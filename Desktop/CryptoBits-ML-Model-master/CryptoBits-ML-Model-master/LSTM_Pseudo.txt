1. Get the data from API or Dataset
data = getData()

2. Create a MinMaxScaler to normalize data between 0 and 1
scaler = MinMaxScaler(feature_range=(0, 1))

3. Reshape the "Close" column data and fit the scaler
scaled_data = scaler.fit_transform(data['Close'])

4. Prepare the dataset using the chosen time_step value
X_data, y_data = prepareDataset(scaled_data, time_step = val)

5. Split data into training and testing sets
xTrain, y_train, xTest, yTest = splitData(X_data, y_data)

6. Reshape features to 3D tensors for LSTM compatibility
xTrain, xTest = reshapeData(xTrain, xTest)

7. Create a sequential LSTM model with two LSTM layers and two dense layers
model <= Sequential()
model.add <= LSTM(units=50)
model.add <= LSTM(units=50)
model.add <= Dense(units=25)
model.add <= Dense(units=1)

8. Compile the model using Adam optimizer and mean squared error loss
model.compile(optimizer='adam', loss='mean_squared_error')

9. Train the model for the specified
model.fit(xTrain, y_train)

10. Make predictions on the test data
predictions = model.predict(xTest)